# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        c = 1
        cr = head
        while cr.next != None:
            cr = cr.next
            c+=1
        c = (c//2)+1
        k = 1
        cr=head
        while k!= c:
            k+=1
            cr = cr.next
        return cr

This is clean approach. 

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        c = 1
        cr = head
        while cr.next != None:
            cr = cr.next
            c+=1
        c = (c//2)+1
        k = 1
        cr=head
        while k!= c:
            k+=1
            cr = cr.next
        return cr

The above is a clean approach
